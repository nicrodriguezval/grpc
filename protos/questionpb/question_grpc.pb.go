// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: protos/questionpb/question.proto

package questionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuestionService_CreateQuestions_FullMethodName = "/question.QuestionService/CreateQuestions"
)

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	CreateQuestions(ctx context.Context, opts ...grpc.CallOption) (QuestionService_CreateQuestionsClient, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) CreateQuestions(ctx context.Context, opts ...grpc.CallOption) (QuestionService_CreateQuestionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuestionService_ServiceDesc.Streams[0], QuestionService_CreateQuestions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &questionServiceCreateQuestionsClient{stream}
	return x, nil
}

type QuestionService_CreateQuestionsClient interface {
	Send(*Question) error
	CloseAndRecv() (*CreateQuestionResponse, error)
	grpc.ClientStream
}

type questionServiceCreateQuestionsClient struct {
	grpc.ClientStream
}

func (x *questionServiceCreateQuestionsClient) Send(m *Question) error {
	return x.ClientStream.SendMsg(m)
}

func (x *questionServiceCreateQuestionsClient) CloseAndRecv() (*CreateQuestionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateQuestionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility
type QuestionServiceServer interface {
	CreateQuestions(QuestionService_CreateQuestionsServer) error
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (UnimplementedQuestionServiceServer) CreateQuestions(QuestionService_CreateQuestionsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_CreateQuestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuestionServiceServer).CreateQuestions(&questionServiceCreateQuestionsServer{stream})
}

type QuestionService_CreateQuestionsServer interface {
	SendAndClose(*CreateQuestionResponse) error
	Recv() (*Question, error)
	grpc.ServerStream
}

type questionServiceCreateQuestionsServer struct {
	grpc.ServerStream
}

func (x *questionServiceCreateQuestionsServer) SendAndClose(m *CreateQuestionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *questionServiceCreateQuestionsServer) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateQuestions",
			Handler:       _QuestionService_CreateQuestions_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/questionpb/question.proto",
}
