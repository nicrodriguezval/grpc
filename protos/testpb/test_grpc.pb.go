// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: protos/testpb/test.proto

package testpb

import (
	context "context"
	questionpb "github.com/nicrodriguezval/grpc/protos/questionpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_GetTest_FullMethodName    = "/test.TestService/GetTest"
	TestService_CreateTest_FullMethodName = "/test.TestService/CreateTest"
	TestService_TakeTest_FullMethodName   = "/test.TestService/TakeTest"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*Test, error)
	CreateTest(ctx context.Context, in *Test, opts ...grpc.CallOption) (*CreateTestResponse, error)
	TakeTest(ctx context.Context, opts ...grpc.CallOption) (TestService_TakeTestClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, TestService_GetTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) CreateTest(ctx context.Context, in *Test, opts ...grpc.CallOption) (*CreateTestResponse, error) {
	out := new(CreateTestResponse)
	err := c.cc.Invoke(ctx, TestService_CreateTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TakeTest(ctx context.Context, opts ...grpc.CallOption) (TestService_TakeTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_TakeTest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTakeTestClient{stream}
	return x, nil
}

type TestService_TakeTestClient interface {
	Send(*TakeTestRequest) error
	Recv() (*questionpb.Question, error)
	grpc.ClientStream
}

type testServiceTakeTestClient struct {
	grpc.ClientStream
}

func (x *testServiceTakeTestClient) Send(m *TakeTestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceTakeTestClient) Recv() (*questionpb.Question, error) {
	m := new(questionpb.Question)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	GetTest(context.Context, *GetTestRequest) (*Test, error)
	CreateTest(context.Context, *Test) (*CreateTestResponse, error)
	TakeTest(TestService_TakeTestServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) GetTest(context.Context, *GetTestRequest) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (UnimplementedTestServiceServer) CreateTest(context.Context, *Test) (*CreateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedTestServiceServer) TakeTest(TestService_TakeTestServer) error {
	return status.Errorf(codes.Unimplemented, "method TakeTest not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_CreateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CreateTest(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TakeTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).TakeTest(&testServiceTakeTestServer{stream})
}

type TestService_TakeTestServer interface {
	Send(*questionpb.Question) error
	Recv() (*TakeTestRequest, error)
	grpc.ServerStream
}

type testServiceTakeTestServer struct {
	grpc.ServerStream
}

func (x *testServiceTakeTestServer) Send(m *questionpb.Question) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceTakeTestServer) Recv() (*TakeTestRequest, error) {
	m := new(TakeTestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _TestService_GetTest_Handler,
		},
		{
			MethodName: "CreateTest",
			Handler:    _TestService_CreateTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TakeTest",
			Handler:       _TestService_TakeTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/testpb/test.proto",
}
